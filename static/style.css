# Create tuple subclasses with named fields
Label = namedtuple( 'Label' , [

    'name'        , # The identifier of this label, e.g. 'car', 'person', ... .
                    # We use them to uniquely name the 30 classes

    'id'          , # An integer ID that is associated with this label.

    'categoryId'       , # IDs of labels which match to pixel values
                    # corresponding to the 8 main categories.

    'category'    , # The name of the category that this label belongs to
    ] )

#--------------------------------------------------------------------------------
# A list of all labels
#--------------------------------------------------------------------------------

labels = [
    #name                             id    catId   category
    Label(  'unlabeled'            ,  0 ,      0 , 'void'),
    Label(  'ego vehicle'          ,  1 ,      0 , 'void'),
    Label(  'rectification border' ,  2 ,      0 , 'void'),
    Label(  'out of roi'           ,  3 ,      0 , 'void'),
    Label(  'static'               ,  4 ,      0 , 'void'),
    Label(  'dynamic'              ,  5 ,      0 , 'void'),
    Label(  'ground'               ,  6 ,      0 , 'void'),
    Label(  'road'                 ,  7 ,      1 , 'flat'),
    Label(  'sidewalk'             ,  8 ,      1 , 'flat'),
    Label(  'parking'              ,  9 ,      1 , 'flat'),
    Label(  'rail track'           , 10 ,      1 , 'flat'),
    Label(  'building'             , 11 ,      2 , 'construction'),
    Label(  'wall'                 , 12 ,      2 , 'construction'),
    Label(  'fence'                , 13 ,      2 , 'construction'),
    Label(  'guard rail'           , 14 ,      2 , 'construction'),
    Label(  'bridge'               , 15 ,      2 , 'construction'),
    Label(  'tunnel'               , 16 ,      2 , 'construction'),
    Label(  'pole'                 , 17 ,      3 , 'object'),
    Label(  'polegroup'            , 18 ,      3 , 'object'),
    Label(  'traffic light'        , 19 ,      3 , 'object'),
    Label(  'traffic sign'         , 20 ,      3 , 'object'),
    Label(  'vegetation'           , 21 ,      4 , 'nature'),
    Label(  'terrain'              , 22 ,      4 , 'nature'),
    Label(  'sky'                  , 23 ,      5 , 'sky'),
    Label(  'person'               , 24 ,      6 , 'human'),
    Label(  'rider'                , 25 ,      6 , 'human'),
    Label(  'car'                  , 26 ,      7 , 'vehicle'),
    Label(  'truck'                , 27 ,      7 , 'vehicle'),
    Label(  'bus'                  , 28 ,      7 , 'vehicle'),
    Label(  'caravan'              , 29 ,      7 , 'vehicle'),
    Label(  'trailer'              , 30 ,      7 , 'vehicle'),
    Label(  'train'                , 31 ,      7 , 'vehicle'),
    Label(  'motorcycle'           , 32 ,      7 , 'vehicle'),
    Label(  'bicycle'              , 33 ,      7 , 'vehicle'),
    Label(  'license plate'        , -1 ,      7 , 'vehicle')]

# Function to map labels and categories
def map_id2category(labels):
    """ This function maps the ~30 labels' IDs
        to the 8 main categories' IDs
    """
    cat_label = {label.id: label.categoryId for label in labels}
    
    # Get the mapping
    map_category = np.vectorize(cat_label.get)
    return map_category

# Set masks folders with 8 main categories
train_target = 'data/train/masks'
val_target = 'data/val/masks'
test_target = 'data/test/masks'

# Function to create new masks 
def old_to_new_mask(img_path, msk32_path, msk8_path, labels):
    # Create lists
    img_list = os.listdir(img_path)
    msk32_list = os.listdir(msk32_path)

    # Sort list
    img_list.sort()
    msk32_list.sort()

    for i in range(0, len(img_list)):
        # Read images and masks
        img = cv2.imread(f'{img_path}/{img_list[i]}')/255
        msk32 = cv2.imread(f'{msk32_path}/{msk32_list[i]}', 
                           cv2.IMREAD_GRAYSCALE)
        
        # Convert msk32 to msk8
        map_category = map_id2category(labels)
        msk8 = map_category(msk32)

        # Save new masks on disk
        cv2.imwrite(f'{msk8_path}/{msk32_list[i]}', msk8)
        
# Save the masks for TRAIN
old_to_new_mask(train_input, train_masks_f, train_target, labels)

# Save the masks for VAL
old_to_new_mask(val_input, val_masks_f, val_target, labels)

# Save the masks for TEST
old_to_new_mask(test_input, test_masks_f, test_target, labels)

# Create dataset
height = [
    len(os.listdir(train_input)), 
    len(os.listdir(train_target)), 
    len(os.listdir(val_input)), 
    len(os.listdir(val_target)), 
    len(os.listdir(test_input)), 
    len(os.listdir(test_target)), 
]
bars = ('Train Images', 'Train Masks', 'Val Images', 'Val Masks', 'Test Images', 'Test Masks')
x_pos = np.arange(len(bars))

# Display len of differents directories
plt.figure()
plt.bar(x=x_pos, height=height)
plt.ylabel('Count')
plt.xticks(x_pos, bars, rotation=45)
plt.title('File distribution')
plt.show()